/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WelcomeImport } from './routes/welcome'
import { Route as EntriesIndexImport } from './routes/entries/index'
import { Route as PersonsNewImport } from './routes/persons/new'
import { Route as EntriesNewImport } from './routes/entries/new'
import { Route as EntriesEntryIdImport } from './routes/entries/$entryId'
import { Route as PersonsPersonIdIndexImport } from './routes/persons/$personId/index'
import { Route as PersonsPersonIdEntriesImport } from './routes/persons/$personId/entries'

// Create/Update Routes

const WelcomeRoute = WelcomeImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => rootRoute,
} as any)

const EntriesIndexRoute = EntriesIndexImport.update({
  id: '/entries/',
  path: '/entries/',
  getParentRoute: () => rootRoute,
} as any)

const PersonsNewRoute = PersonsNewImport.update({
  id: '/persons/new',
  path: '/persons/new',
  getParentRoute: () => rootRoute,
} as any)

const EntriesNewRoute = EntriesNewImport.update({
  id: '/entries/new',
  path: '/entries/new',
  getParentRoute: () => rootRoute,
} as any)

const EntriesEntryIdRoute = EntriesEntryIdImport.update({
  id: '/entries/$entryId',
  path: '/entries/$entryId',
  getParentRoute: () => rootRoute,
} as any)

const PersonsPersonIdIndexRoute = PersonsPersonIdIndexImport.update({
  id: '/persons/$personId/',
  path: '/persons/$personId/',
  getParentRoute: () => rootRoute,
} as any)

const PersonsPersonIdEntriesRoute = PersonsPersonIdEntriesImport.update({
  id: '/persons/$personId/entries',
  path: '/persons/$personId/entries',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/welcome': {
      id: '/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeImport
      parentRoute: typeof rootRoute
    }
    '/entries/$entryId': {
      id: '/entries/$entryId'
      path: '/entries/$entryId'
      fullPath: '/entries/$entryId'
      preLoaderRoute: typeof EntriesEntryIdImport
      parentRoute: typeof rootRoute
    }
    '/entries/new': {
      id: '/entries/new'
      path: '/entries/new'
      fullPath: '/entries/new'
      preLoaderRoute: typeof EntriesNewImport
      parentRoute: typeof rootRoute
    }
    '/persons/new': {
      id: '/persons/new'
      path: '/persons/new'
      fullPath: '/persons/new'
      preLoaderRoute: typeof PersonsNewImport
      parentRoute: typeof rootRoute
    }
    '/entries/': {
      id: '/entries/'
      path: '/entries'
      fullPath: '/entries'
      preLoaderRoute: typeof EntriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/persons/$personId/entries': {
      id: '/persons/$personId/entries'
      path: '/persons/$personId/entries'
      fullPath: '/persons/$personId/entries'
      preLoaderRoute: typeof PersonsPersonIdEntriesImport
      parentRoute: typeof rootRoute
    }
    '/persons/$personId/': {
      id: '/persons/$personId/'
      path: '/persons/$personId'
      fullPath: '/persons/$personId'
      preLoaderRoute: typeof PersonsPersonIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/welcome': typeof WelcomeRoute
  '/entries/$entryId': typeof EntriesEntryIdRoute
  '/entries/new': typeof EntriesNewRoute
  '/persons/new': typeof PersonsNewRoute
  '/entries': typeof EntriesIndexRoute
  '/persons/$personId/entries': typeof PersonsPersonIdEntriesRoute
  '/persons/$personId': typeof PersonsPersonIdIndexRoute
}

export interface FileRoutesByTo {
  '/welcome': typeof WelcomeRoute
  '/entries/$entryId': typeof EntriesEntryIdRoute
  '/entries/new': typeof EntriesNewRoute
  '/persons/new': typeof PersonsNewRoute
  '/entries': typeof EntriesIndexRoute
  '/persons/$personId/entries': typeof PersonsPersonIdEntriesRoute
  '/persons/$personId': typeof PersonsPersonIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/welcome': typeof WelcomeRoute
  '/entries/$entryId': typeof EntriesEntryIdRoute
  '/entries/new': typeof EntriesNewRoute
  '/persons/new': typeof PersonsNewRoute
  '/entries/': typeof EntriesIndexRoute
  '/persons/$personId/entries': typeof PersonsPersonIdEntriesRoute
  '/persons/$personId/': typeof PersonsPersonIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/welcome'
    | '/entries/$entryId'
    | '/entries/new'
    | '/persons/new'
    | '/entries'
    | '/persons/$personId/entries'
    | '/persons/$personId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/welcome'
    | '/entries/$entryId'
    | '/entries/new'
    | '/persons/new'
    | '/entries'
    | '/persons/$personId/entries'
    | '/persons/$personId'
  id:
    | '__root__'
    | '/welcome'
    | '/entries/$entryId'
    | '/entries/new'
    | '/persons/new'
    | '/entries/'
    | '/persons/$personId/entries'
    | '/persons/$personId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  WelcomeRoute: typeof WelcomeRoute
  EntriesEntryIdRoute: typeof EntriesEntryIdRoute
  EntriesNewRoute: typeof EntriesNewRoute
  PersonsNewRoute: typeof PersonsNewRoute
  EntriesIndexRoute: typeof EntriesIndexRoute
  PersonsPersonIdEntriesRoute: typeof PersonsPersonIdEntriesRoute
  PersonsPersonIdIndexRoute: typeof PersonsPersonIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  WelcomeRoute: WelcomeRoute,
  EntriesEntryIdRoute: EntriesEntryIdRoute,
  EntriesNewRoute: EntriesNewRoute,
  PersonsNewRoute: PersonsNewRoute,
  EntriesIndexRoute: EntriesIndexRoute,
  PersonsPersonIdEntriesRoute: PersonsPersonIdEntriesRoute,
  PersonsPersonIdIndexRoute: PersonsPersonIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/welcome",
        "/entries/$entryId",
        "/entries/new",
        "/persons/new",
        "/entries/",
        "/persons/$personId/entries",
        "/persons/$personId/"
      ]
    },
    "/welcome": {
      "filePath": "welcome.tsx"
    },
    "/entries/$entryId": {
      "filePath": "entries/$entryId.tsx"
    },
    "/entries/new": {
      "filePath": "entries/new.tsx"
    },
    "/persons/new": {
      "filePath": "persons/new.tsx"
    },
    "/entries/": {
      "filePath": "entries/index.tsx"
    },
    "/persons/$personId/entries": {
      "filePath": "persons/$personId/entries.tsx"
    },
    "/persons/$personId/": {
      "filePath": "persons/$personId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
