/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WelcomeImport } from './routes/welcome'
import { Route as EntriesIndexImport } from './routes/entries/index'
import { Route as EntriesNewImport } from './routes/entries/new'

// Create/Update Routes

const WelcomeRoute = WelcomeImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => rootRoute,
} as any)

const EntriesIndexRoute = EntriesIndexImport.update({
  id: '/entries/',
  path: '/entries/',
  getParentRoute: () => rootRoute,
} as any)

const EntriesNewRoute = EntriesNewImport.update({
  id: '/entries/new',
  path: '/entries/new',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/welcome': {
      id: '/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeImport
      parentRoute: typeof rootRoute
    }
    '/entries/new': {
      id: '/entries/new'
      path: '/entries/new'
      fullPath: '/entries/new'
      preLoaderRoute: typeof EntriesNewImport
      parentRoute: typeof rootRoute
    }
    '/entries/': {
      id: '/entries/'
      path: '/entries'
      fullPath: '/entries'
      preLoaderRoute: typeof EntriesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/welcome': typeof WelcomeRoute
  '/entries/new': typeof EntriesNewRoute
  '/entries': typeof EntriesIndexRoute
}

export interface FileRoutesByTo {
  '/welcome': typeof WelcomeRoute
  '/entries/new': typeof EntriesNewRoute
  '/entries': typeof EntriesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/welcome': typeof WelcomeRoute
  '/entries/new': typeof EntriesNewRoute
  '/entries/': typeof EntriesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/welcome' | '/entries/new' | '/entries'
  fileRoutesByTo: FileRoutesByTo
  to: '/welcome' | '/entries/new' | '/entries'
  id: '__root__' | '/welcome' | '/entries/new' | '/entries/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  WelcomeRoute: typeof WelcomeRoute
  EntriesNewRoute: typeof EntriesNewRoute
  EntriesIndexRoute: typeof EntriesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  WelcomeRoute: WelcomeRoute,
  EntriesNewRoute: EntriesNewRoute,
  EntriesIndexRoute: EntriesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/welcome",
        "/entries/new",
        "/entries/"
      ]
    },
    "/welcome": {
      "filePath": "welcome.tsx"
    },
    "/entries/new": {
      "filePath": "entries/new.tsx"
    },
    "/entries/": {
      "filePath": "entries/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
